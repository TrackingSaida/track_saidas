from __future__ import annotations

from typing import Optional, List
from datetime import datetime, date, timedelta

from fastapi import APIRouter, Depends, HTTPException, status, Query
from pydantic import BaseModel, Field, ConfigDict
from sqlalchemy import select
from sqlalchemy.orm import Session

from db import get_db
from auth import get_current_user
from models import User, Owner, Saida

router = APIRouter(prefix="/saidas", tags=["Sa√≠das"])

# ---------- SCHEMAS ----------
class SaidaCreate(BaseModel):
    entregador: str = Field(min_length=1)
    codigo: str = Field(min_length=1)
    servico: str = Field(min_length=1)  # vem do front

class SaidaOut(BaseModel):
    id_saida: int
    timestamp: datetime
    data: date
    sub_base: Optional[str]
    username: Optional[str]
    entregador: Optional[str]
    codigo: Optional[str]
    servico: Optional[str]
    status: Optional[str]
    model_config = ConfigDict(from_attributes=True)

# Sa√≠das para a grid (listar)
class SaidaGridItem(BaseModel):
    id_saida: int                 # <- inclui ID para a UI
    timestamp: datetime           # Data/Hora
    entregador: Optional[str]
    codigo: Optional[str]
    servico: Optional[str]
    status: Optional[str]
    model_config = ConfigDict(from_attributes=True)

# Atualiza√ß√£o parcial
class SaidaUpdate(BaseModel):
    entregador: Optional[str] = Field(None, description="Novo entregador")
    status: Optional[str] = Field(None, description="Novo status")
    codigo: Optional[str] = Field(None, description="Novo c√≥digo")

# ---------- HELPERS ----------
def _resolve_user_base(db: Session, current_user: User) -> str:
    """
    Busca na tabela `users` a sub_base do usu√°rio.
    Tenta por id, depois por email/username.
    Exige 'users.sub_base' preenchido.
    """
    # por ID
    user_id = getattr(current_user, "id", None)
    if user_id is not None:
        u = db.get(User, user_id)
        if u and getattr(u, "sub_base", None):
            return u.sub_base
    # por email
    email = getattr(current_user, "email", None)
    if email:
        u = db.scalars(select(User).where(User.email == email)).first()
        if u and getattr(u, "sub_base", None):
            return u.sub_base
    # por username
    username = getattr(current_user, "username", None)
    if username:
        u = db.scalars(select(User).where(User.username == username)).first()
        if u and getattr(u, "sub_base", None):
            return u.sub_base

    raise HTTPException(status_code=401, detail="Usu√°rio sem 'sub_base' definida em 'users'.")

def _get_owner_for_base_or_user(db: Session, sub_base_user: str, email: str | None, username: str | None) -> Owner:
    """
    Retorna o Owner respons√°vel pela sub_base do usu√°rio (estrito).
    Exige 'owner.sub_base' preenchida.
    """
    owner = db.scalars(select(Owner).where(Owner.sub_base == sub_base_user)).first()
    if owner:
        return owner
    raise HTTPException(status_code=404, detail="Owner n√£o encontrado para esta 'sub_base'.")

def _get_owned_saida(db: Session, sub_base_user: str, id_saida: int) -> Saida:
    """
    Valida se a sa√≠da existe e pertence √† mesma sub_base do solicitante.
    """
    obj = db.get(Saida, id_saida)
    if not obj or obj.sub_base != sub_base_user:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail={"code": "SAIDA_NOT_FOUND", "message": "Sa√≠da n√£o encontrada."}
        )
    return obj

def _estornar_if_prepago(db: Session, owner: Owner):
    """
    Estorna 1 unidade no plano pr√©-pago (segue a mesma regra do d√©bito).
    """
    try:
        cobranca = int(str(owner.cobranca or "0"))
    except Exception:
        cobranca = 0
    if cobranca == 0:
        valor_un = float(owner.valor or 0.0)
        owner.creditos = round(float(owner.creditos or 0.0) + round(valor_un * 1, 2), 2)
        db.add(owner)

def _check_delete_window_or_409(ts: datetime):
    """
    Garante janela de exclus√£o <= 1 dia a partir do timestamp da sa√≠da.
    """
    if ts is None:
        raise HTTPException(
            status_code=status.HTTP_409_CONFLICT,
            detail={"code": "DELETE_WINDOW_EXPIRED", "message": "Exclus√£o n√£o permitida: janela de 1 dia expirada."}
        )
    agora = datetime.utcnow()
    if agora - ts > timedelta(days=1):
        raise HTTPException(
            status_code=status.HTTP_409_CONFLICT,
            detail={"code": "DELETE_WINDOW_EXPIRED", "message": "Exclus√£o n√£o permitida: janela de 1 dia expirada."}
        )

# ---------- POST: REGISTRAR ----------
@router.post(
    "/registrar",
    status_code=status.HTTP_201_CREATED,
    responses={
        409: {"description": "Conflitos (duplicidade / cr√©ditos)"},
        402: {"description": "Mensalidade vencida"},
        404: {"description": "Owner n√£o encontrado"},
        401: {"description": "N√£o autenticado"},
        422: {"description": "Valida√ß√£o"},
        500: {"description": "Erro interno"},
    },
)
def registrar_saida(
    payload: SaidaCreate,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user),
):
    username = getattr(current_user, "username", None)
    email = getattr(current_user, "email", None)
    if not username:
        raise HTTPException(status_code=401, detail="Usu√°rio sem 'username'.")

    # sub_base e owner (usados para fins de cobran√ßa)
    sub_base_user = _resolve_user_base(db, current_user)
    owner = _get_owner_for_base_or_user(db, sub_base_user, email, username)

    # Regras de cobran√ßa
    try:
        cobranca = int(str(owner.cobranca or "0"))
    except Exception:
        cobranca = 0
    valor_un = float(owner.valor or 0.0)
    creditos = float(owner.creditos or 0.0)
    mensalidade = owner.mensalidade

    # Dados do payload (servico vem do front)
    codigo = payload.codigo.strip()
    entregador = payload.entregador.strip()
    servico = payload.servico.strip()

    # üîé Duplicidade por sub_base + c√≥digo
    existente = db.scalars(
        select(Saida).where(Saida.sub_base == sub_base_user, Saida.codigo == codigo)
    ).first()
    if existente:
        raise HTTPException(
            status_code=status.HTTP_409_CONFLICT,
            detail={"code": "DUPLICATE_SAIDA", "message": f"O c√≥digo '{codigo}' j√° foi registrado anteriormente."}
        )

    try:
        # 1) Cobran√ßa
        if cobranca == 0:  # pr√©-pago
            custo = round(valor_un * 1, 2)
            if creditos < custo:
                raise HTTPException(
                    status_code=status.HTTP_409_CONFLICT,
                    detail={"code": "INSUFFICIENT_CREDITS",
                            "message": f"Cr√©ditos insuficientes. Necess√°rio {custo:.2f}, saldo {creditos:.2f}."}
                )
            owner.creditos = round(creditos - custo, 2)
            db.add(owner)
        elif cobranca == 1:  # mensalidade
            if not mensalidade or date.today() > mensalidade:
                raise HTTPException(status_code=402, detail="Mensalidade vencida ou n√£o configurada.")
        else:
            raise HTTPException(status_code=422, detail="Valor inv√°lido em 'cobranca' (use 0 ou 1).")

        # 2) Insert √∫nico
        row = Saida(
            sub_base=sub_base_user,
            username=username,
            entregador=entregador,
            codigo=codigo,
            servico=servico,   # grava exatamente o que veio do front
            status="saiu",
        )
        db.add(row)
        db.commit()
        db.refresh(row)

    except HTTPException:
        db.rollback()
        raise
    except Exception as e:
        db.rollback()
        raise HTTPException(status_code=500, detail=f"Erro ao registrar sa√≠da: {e}")

    return SaidaOut.model_validate(row)

# ---------- GET: LISTAR COM FILTROS ----------
@router.get("/listar", response_model=List[SaidaGridItem])
def listar_saidas(
    de: Optional[date] = Query(None, description="Data inicial (yyyy-mm-dd)"),
    ate: Optional[date] = Query(None, description="Data final (yyyy-mm-dd)"),
    entregador: Optional[str] = Query(None, description="Filtra por entregador (texto exato)"),
    status_: Optional[str] = Query(None, alias="status", description="Filtra por status (texto exato)"),
    codigo: Optional[str] = Query(None, description="Filtro 'cont√©m' no c√≥digo"),
    limit: int = Query(200, ge=1, le=1000),
    offset: int = Query(0, ge=0),
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user),
):
    """
    Retorna sa√≠das da sub_base do usu√°rio autenticado, aplicando filtros opcionais.
    Agora inclui `id_saida` para a grid usar em PATCH/DELETE.
    """
    sub_base_user = _resolve_user_base(db, current_user)

    stmt = select(Saida).where(Saida.sub_base == sub_base_user)
    if de:
        stmt = stmt.where(Saida.data >= de)
    if ate:
        stmt = stmt.where(Saida.data <= ate)
    if entregador and entregador.strip() and entregador.strip().lower() != "(todos)":
        stmt = stmt.where(Saida.entregador == entregador.strip())
    if status_ and status_.strip() and status_.strip().lower() != "(todos)":
        stmt = stmt.where(Saida.status == status_.strip())
    if codigo and codigo.strip():
        like = f"%{codigo.strip()}%"
        stmt = stmt.where(Saida.codigo.ilike(like))

    stmt = stmt.order_by(Saida.timestamp.desc()).offset(offset).limit(limit)
    rows = db.execute(stmt).scalars().all()

    return [
        SaidaGridItem(
            id_saida=r.id_saida,
            timestamp=r.timestamp,
            entregador=r.entregador,
            codigo=r.codigo,
            servico=r.servico,
            status=r.status,
        )
        for r in rows
    ]

# ---------- PATCH: ATUALIZAR (por ID) ----------
@router.patch(
    "/{id_saida}",
    response_model=SaidaOut,
    responses={
        200: {"description": "Atualizado com sucesso"},
        404: {"description": "Sa√≠da n√£o encontrada"},
        409: {"description": "Conflito (c√≥digo duplicado)"},
        422: {"description": "Nenhum campo para atualizar ou dados inv√°lidos"},
    },
)
def atualizar_saida(
    id_saida: int,
    payload: SaidaUpdate,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user),
):
    sub_base_user = _resolve_user_base(db, current_user)
    obj = _get_owned_saida(db, sub_base_user, id_saida)

    if payload.entregador is None and payload.status is None and payload.codigo is None:
        raise HTTPException(
            status_code=status.HTTP_422_UNPROCESSABLE_ENTITY,
            detail={"code": "NO_FIELDS_TO_UPDATE", "message": "Informe ao menos um campo (status, entregador ou codigo)."}
        )

    try:
        # Atualiza√ß√£o de c√≥digo: validar vazio e duplicidade dentro da mesma sub_base
        if payload.codigo is not None:
            novo_codigo = payload.codigo.strip()
            if not novo_codigo:
                raise HTTPException(
                    status_code=status.HTTP_422_UNPROCESSABLE_ENTITY,
                    detail={"code": "INVALID_CODIGO", "message": "C√≥digo n√£o pode ser vazio."}
                )
            if novo_codigo != obj.codigo:
                dup = db.scalars(
                    select(Saida).where(
                        Saida.sub_base == obj.sub_base,
                        Saida.codigo == novo_codigo,
                        Saida.id_saida != obj.id_saida
                    )
                ).first()
                if dup:
                    raise HTTPException(
                        status_code=status.HTTP_409_CONFLICT,
                        detail={"code": "DUPLICATE_SAIDA", "message": f"O c√≥digo '{novo_codigo}' j√° foi registrado anteriormente."}
                    )
                obj.codigo = novo_codigo

        if payload.entregador is not None:
            obj.entregador = payload.entregador.strip()
        if payload.status is not None:
            obj.status = payload.status.strip()

        db.add(obj)
        db.commit()
        db.refresh(obj)
    except HTTPException:
        db.rollback()
        raise
    except Exception:
        db.rollback()
        raise HTTPException(status_code=500, detail={"code": "UPDATE_FAILED", "message": "Erro ao atualizar a sa√≠da."})

    return SaidaOut.model_validate(obj)

# ---------- DELETE: REMOVER (por ID, com janela de 1 dia + estorno) ----------
@router.delete(
    "/{id_saida}",
    status_code=status.HTTP_204_NO_CONTENT,
    responses={
        204: {"description": "Removido com sucesso"},
        404: {"description": "Sa√≠da n√£o encontrada"},
        409: {"description": "Janela de exclus√£o expirada"},
    },
)
def deletar_saida(
    id_saida: int,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user),
):
    sub_base_user = _resolve_user_base(db, current_user)
    obj = _get_owned_saida(db, sub_base_user, id_saida)

    _check_delete_window_or_409(obj.timestamp)

    owner = _get_owner_for_base_or_user(db, sub_base_user, getattr(current_user, "email", None), getattr(current_user, "username", None))

    try:
        _estornar_if_prepago(db, owner)
        db.delete(obj)
        db.commit()
    except HTTPException:
        db.rollback()
        raise
    except Exception:
        db.rollback()
        raise HTTPException(status_code=500, detail={"code": "DELETE_FAILED", "message": "Erro ao deletar a sa√≠da."})

    return
